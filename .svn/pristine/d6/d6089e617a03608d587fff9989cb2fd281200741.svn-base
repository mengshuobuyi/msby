//
//  PrivateChatViewController.m
//  APP
//  私聊页面
//  弹性轮询
//  接口：
//  添加会话明细 /h5/team/chat/detail/addChatDetail
//  拉取全量 /h5/team/chat/detail/getAll
//  增量轮询 /h5/team/chat/message/getMessage
//  Created by Martin.Liu on 16/3/10.
//  Copyright © 2016年 carret. All rights reserved.
//

#import "PrivateChatViewController.h"

//系统库
#import <MobileCoreServices/MobileCoreServices.h>
#import <AVFoundation/AVCaptureDevice.h>
#import <AVFoundation/AVMediaFormat.h>

//控制器
//#import "QuickSearchViewController.h"
#import "DFMultiPhotoSelectorViewController.h"
#import "MedicineDetailViewController.h"
#import "MedicineSearchResultViewController.h"

//第三方UI控件
#import "XHShareMenuView.h"
#import "XHMessageInputView.h"
#import "XHEmotionManager.h"
#import "XHEmotionManagerView.h"
#import "ChatManagerDefs.h"
#import "ChatBubbleViewHeader.h"

//第三方数据类
#import "XHMessage.h"
#import "XMPPStream.h"
#import "SVProgressHUD.h"
#import "SBJson.h"
#import "PopupMarketActivityView.h"

//相册
#import "QYImage.h"
#import "QYPhotoAlbum.h"
#import "PhotoAlbum.h"

//图片浏览
#import "PhotoPreView.h"

//扩展
#import "UIImage+Ex.h"
#import "UIScrollView+XHkeyboardControl.h"

#import "UIImageView+WebCache.h"

//语音
#import "XHVoiceRecordHUD.h"
#import <AVFoundation/AVCaptureDevice.h>
#import <AVFoundation/AVMediaFormat.h>
#import "XHAudioPlayerHelper.h"
#import "VoiceChatBubbleView.h"

#import "QWPrivateMessageModel.h"
#import "ConsultStore.h"
#import "PrivateMessageCenter.h"
#import "XHVoiceRecordHelper.h"
#import "ChatIncomeTableViewCell.h"
#import "ChatOutgoingTableViewCell.h"
#import "QuickSearchDrugViewController.h"
#import "WebDirectViewController.h"
#import "CircleModel.h"
#import "ExpertPageViewController.h"
#import "UserPageViewController.h"
//BOOL const PrivateAllowsSendFace             = YES;                //是否支持发送表情
//BOOL const PrivateAllowsSendVoice            = YES;                //是否支持发送声音
//BOOL const PrivateAllowsSendMultiMedia       = YES;                //是否支持发送多媒体
//BOOL const PrivateAllowsPanToDismissKeyboard = NO;                 //是否允许手势关闭键盘，默认是允许
const int alertPrivateResendIdentifier       = 10000;
const int alertPrivateDeleteIdentifier       = 10001;

#define kOffSet        45  //tableView偏移量
#define kInputViewHeight   45  //输入框的高度
#define kEmojiKeyboardHeight 216 //表情键盘的高度
#define kShareMenuHeight    95 //shareMenu键盘的高度
//self.view的高度  因为点击发送药品时，self.view的高度含导航栏，特此区别
#define kViewHeight  [UIScreen mainScreen].bounds.size.height - NAV_H - STATUS_H

@interface PrivateChatViewController ()<XHMessageInputViewDelegate,XHShareMenuViewDelegate,XHEmotionManagerViewDataSource,XHEmotionManagerViewDelegate,UITableViewDataSource,UITableViewDelegate,DFMultiPhotoSelectorViewControllerDelegate,UINavigationControllerDelegate,MLEmojiLabelDelegate, UIImagePickerControllerDelegate,UIAlertViewDelegate,MarketActivityViewDelegate,XHAudioPlayerHelperDelegate>
{
    PrivateMessageCenter *msgCenter;
    
    MessageModel        *playingMessageModel;
    
    NSArray* arrPhotos;
    
    MessageModel *onceModel;
}

/**
 *  点击加号扩展键盘
 */
@property (nonatomic, weak, readwrite) XHShareMenuView *shareMenuView;

/**
 *  判断用户是否在滑动中
 */
@property (nonatomic, assign) BOOL isUserScrolling;
/**
 *  第三方接入的功能，也包括系统自身的功能，比如拍照、发送地理位置
 */
@property (nonatomic, strong) NSArray *shareMenuItems;
/**
 *  管理第三方gif表情的控件
 */
@property (nonatomic, weak, readwrite) XHEmotionManagerView *emotionManagerView;
/**
 *  表情数据源
 */
@property (nonatomic, strong) NSArray *emotionManagers;

/**
 *  用于显示发送消息类型控制的工具条，在底部
 */
@property (nonatomic, strong, readonly) XHMessageInputView *messageInputView;
/**
 *  记录旧的textView contentSize Heigth
 */
@property (nonatomic, assign) CGFloat previousTextViewContentHeight;
//录音UI,按住说话,松开发送,拖拽出button 取消发送
@property (nonatomic, strong, readwrite) XHVoiceRecordHUD *voiceRecordHUD;

/**
 *  管理录音工具对象
 */
@property (nonatomic, strong) XHVoiceRecordHelper *voiceRecordHelper;
/**
 *  判断是不是超出了录音最大时长
 */
@property (nonatomic) BOOL isMaxTimeStop;
/**
 *  用来记录需要重发的字典对象
 */
@property (nonatomic, strong) NSDictionary *dicNeedResend;

/**
 *  用来记录需要删除的字典对象
 */
@property (nonatomic, strong) NSDictionary *dicNeedDelete;

/**
 *  当前用户输入的键盘类型
 */
@property (nonatomic, assign) XHInputViewType textViewInputViewType;

/**
 *  营销活动和优惠活动的弹出框
 */
@property (nonatomic, strong) PopupMarketActivityView *popupMarketActivityView;

@property (nonatomic, strong) NSMutableArray *arrNeedAdded;

@property (nonatomic, assign) CGPoint rectHistory;

@property (nonatomic ,assign)BOOL  didScrollOrReload;

@property (nonatomic ,assign)BOOL  didScrollOrLoad;
/**
 *  动态改变TextView的高度
 *
 *  @param textView 被改变的textView对象
 */
- (void)layoutAndAnimateMessageInputTextView:(UITextView *)textView;

@end

@implementation PrivateChatViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    self.title = self.nickName;
    //下拉刷新
    self.tableMain.headerPullToRefreshText = @"下拉刷新";
    self.tableMain.headerReleaseToRefreshText = @"松开刷新";
    self.tableMain.headerRefreshingText = @"正在刷新";
    self.tableMain.backgroundColor = RGBHex(qwColor11);
    [self enableSimpleRefresh:self.tableMain block:^(SRRefreshView *sender) {
        [self headerRereshing];
    }];
    
    [self initilzer];
    [self setUpSharedMenuItem];
    [self setUpEmojiManager];
    [self messageCenterInit];
    
    [self.tableMain removeFooter];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark
#pragma mark view基本回调
- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    //设置键盘事件通知
    [self.tableMain setupPanGestureControlKeyboardHide:allowsPanToDismissKeyboard];
    
    // KVO 检查contentSize
    [self.messageInputView.inputTextView addObserver:self
                                          forKeyPath:@"contentSize"
                                             options:NSKeyValueObservingOptionNew
                                             context:nil];
    
    //不要删注释  貌似没意义,to do by mengai
    if (self.shareMenuView.alpha == 1 || self.emotionManagerView.alpha == 1) {
        //        [self layoutOtherMenuViewHiden:NO];
    }else{
        // 设置键盘通知或者手势控制键盘消失
        self.tableMain.contentInset = UIEdgeInsetsMake(0, 0, 0, 0); //UIEdgeInsets( top: t, left: l, bottom: b, right: r)
        self.tableMain.scrollIndicatorInsets = UIEdgeInsetsMake(0, 0, 0, 0); //UIEdgeInsets( top: t, left: l, bottom: b, right: r)
    }
    
    //设置键盘监听block
    [self initKeyboardBlock];
    //消息中心启动
//    [msgCenter restart];
//    [msgCenter getAllMessages];
    //显示电话顶部控件
    //[self showOrHideHeaderView];
    
    //界面不可右滑弹出
    ((QWBaseNavigationController *)self.navigationController).canDragBack = NO;
    
    // 陈志鹏用的
    
    QWGLOBALMANAGER.strPrivateCircleMsgID = self.sessionID ? self.sessionID : msgCenter.sessionID;
}

- (void)viewWillDisappear:(BOOL)animated
{
    //界面退出时,停止音乐播放
//    [self stopMusicInOtherBubblePressed];
    [super viewWillDisappear:animated];
    //界面退出时,需要注销刚刚的回调,出于两点考虑,其一block会hold住界面,内存不释放,其二该界面会在后台不断接受键盘事件,导致第二次重进该界面出现异常
    [self unLoadKeyboardBlock];

    [self.messageInputView.inputTextView resignFirstResponder];
    [self setEditing:NO animated:YES];
    
    // remove键盘通知或者手势
    [self.tableMain disSetupPanGestureControlKeyboardHide:NO];
    
    // remove KVO
    [self.messageInputView.inputTextView removeObserver:self forKeyPath:@"contentSize"];
    //恢复右滑事件
    ((QWBaseNavigationController *)self.navigationController).canDragBack = YES;
    
    // 陈志鹏用的
    QWGLOBALMANAGER.strPrivateCircleMsgID = nil;
    
}

- (void)popVCAction:(id)sender
{
    if(playingMessageModel) {
        NSIndexPath *indexPath = [NSIndexPath indexPathForRow:[msgCenter getMessageIndex:playingMessageModel] inSection:0];
        ChatTableViewCell *cell = (ChatTableViewCell *)[self.tableMain cellForRowAtIndexPath:indexPath];
        [cell stopVoicePlay];
        [[XHAudioPlayerHelper shareInstance] stopAudio];
        playingMessageModel = nil;
    }
    [[XHAudioPlayerHelper shareInstance] setDelegate:nil];
    [msgCenter deleteMessagesByType:MessageMediaTypeMedicineShowOnce];
    [msgCenter stop];
    [super popVCAction:sender];
}

- (void)dealloc{
    self.emotionManagers = nil;
    [[XHAudioPlayerHelper shareInstance] setDelegate:nil];
//    [self closeMessageCenter];
}

//取消掉所有block
- (void)unLoadKeyboardBlock
{
    [[NSNotificationCenter defaultCenter] postNotificationName:UIKeyboardDidHideNotification object:nil];
    self.tableMain.keyboardDidScrollToPoint = NULL;
    self.tableMain.keyboardWillSnapBackToPoint = NULL;
    self.tableMain.keyboardWillBeDismissed = NULL;
    self.tableMain.keyboardWillChange = NULL;
    self.tableMain.keyboardDidChange = NULL;
    self.tableMain.keyboardDidHide = NULL;
}

#pragma mark - 下拉刷新
- (void)headerRereshing
{
    //测试翻页历史数据
    self.rectHistory = self.tableMain.contentOffset;
    [msgCenter getHistoryMessages:nil success:^(id successObj) {
        [self endHeaderRefresh];
        ;
    } failure:^(id failureObj) {
        ;
    }];
//    [self getHistory];
//    [self.tableMain headerEndRefreshing];
}

#pragma mark - 消息中心
- (void)messageCenterInit
{
    if (msgCenter == nil){
        DebugLog(@"AAAAAAAAAAAAAAAAAAAAAAA");
        msgCenter= [[PrivateMessageCenter alloc]initWithID:self.userId type:IMTypePTPClient];
        msgCenter.sessionID = self.sessionID;
        msgCenter.shopName = self.title;
        [msgCenter start];
        DebugLog(@"VVVVVVVVVVVVVVVVVVVVVVV");
    }
    
    //最新的消息回话，会实时刷新
    IMListBlock currentMsgBlock = ^(NSArray* list, IMListType gotType){
        dispatch_async(dispatch_get_main_queue(), ^{
            
            [self.tableMain reloadData];
//            [self setTableViewInsetsWithBottomValue:self.view.frame.size.height
//             - self.messageInputView.frame.origin.y - kOffSet];
//            [self scrollToBottomAnimated:NO];
            //            self.tableMain.hidden = NO;
        });
        //消息中心回调,全量拉取
        if (gotType == IMListCurrent) {
            
            if(self.product){
                MessageModel *message = [self buildMedicineShowOnceMessage:nil];
                [msgCenter addMessage:message];
            }
            
        }if (gotType == IMListDelete) {
            
        }
        else if (gotType == IMListHistory)
        {
        
        }
        else
        {
            [self setTableViewInsetsWithBottomValue:self.view.frame.size.height
             - self.messageInputView.frame.origin.y - kOffSet];
            [self scrollToBottomAnimated:YES];
        }
        
    };
    [msgCenter getMessages:currentMsgBlock success:^(id successObj) {
        //增量拉取,更新对应branchName,consultMessage等字段
        if (successObj !=nil) {
            CustomerSessionDetailList *model = successObj;
            if(StrIsEmpty(self.title)){
                self.title = model.branchName;
            }
            
        }
        
    } failure:^(id failureObj) {
        
    }];
    
    __weak __typeof(msgCenter) weakMsg = msgCenter;
    __weak __typeof(self) weakSelf = self;
    msgCenter.pullBack = ^(NSInteger obj){
        if(weakMsg.onlineFlag){
            weakSelf.title = [NSString stringWithFormat:@"%@（在线）",weakSelf.nickName];
        }else{
            weakSelf.title = [NSString stringWithFormat:@"%@（离线）",weakSelf.nickName];
        }
    };
    
}

#pragma mark 生成药品信息和优惠活动的固定类型
//仿阿里旺旺,通过药品进入,显示该药品的快捷发送链接,
//显示在当前消息列表最后一条,随便消息递增,会往上翻滚,
//点击一次发送链接,移除此链接,并发送出药品消息
- (MessageModel *)buildMedicineShowOnceMessage:(id)drugModel
{
    NSDate *lastTimeStamp = [NSDate date];
    if(msgCenter.count > 0) {
        MessageModel *lastMsg = [msgCenter getMessageByIndex: msgCenter.count -1];
        lastTimeStamp = [lastMsg.timestamp dateByAddingTimeInterval:1];
        
    }
    
    onceModel = [[MessageModel alloc]initWithMallProductShowOnce:self.product.name proId:self.product.code imgUrl:self.product.imgUrl spec:self.product.spec branchId:self.product.branch.branchId branchProId:self.product.id sender:self.messageSender timestamp:lastTimeStamp UUID:[XMPPStream generateUUID]];
    
    onceModel.sended = Sended;
    onceModel.messageDeliveryType = XHBubbleMessageTypeSending;
    onceModel.avatorUrl = QWGLOBALMANAGER.configure.avatarUrl;
    onceModel.messageMediaType = MessageMediaTypeMedicineShowOnce;
    return onceModel;
}

#pragma mark -
#pragma mark UITableView Delegate start  <<<<<<<<<<
-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    NSObject *obj = nil;
    //    [self.dataSource objectAtIndex:indexPath.row];
    obj=[msgCenter getMessageByIndex:indexPath.row];
    
    BOOL displayTimestamp = YES;
    displayTimestamp = [self shouldDisplayTimestampForRowAtIndexPath:indexPath];
    return [ChatTableViewCell tableView:tableView heightForRowAtIndexPath:indexPath withObject:(MessageModel *)obj hasTimeStamp:displayTimestamp];
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    // Return the number of sections.
    return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    if (msgCenter) {
        return msgCenter.count;
    }
    return 0;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    MessageModel *model;
    model = [msgCenter getMessageByIndex:indexPath.row];
    
    if(model.messageDeliveryType == MessageTypeSending) {
        ChatOutgoingTableViewCell   *cell = [tableView dequeueReusableCellWithIdentifier:@"ChatOutgoingTableViewCell"];
        cell.chatCellStyle = ChatCellStylePrivateChat;
        cell.superParentViewController = self;
        cell.delegate = msgCenter;
        BOOL displayTimestamp = YES;
        displayTimestamp = [self shouldDisplayTimestampForRowAtIndexPath:indexPath];
        [cell setupSubviewsForMessageModel:model];
        cell.displayTimestamp = displayTimestamp;
        cell.messageModel = model;
        [cell updateBubbleViewConsTraint:model];
        
        if (model.messageDeliveryType == MessageTypeSending) {
            [cell.headImageView setImageWithURL:[NSURL URLWithString:QWGLOBALMANAGER.configure.avatarUrl] placeholderImage:[UIImage imageNamed:@"ic_img_notlogin"] options:SDWebImageRefreshCached];
        } else {
            [cell.headImageView setImageWithURL:[NSURL URLWithString:model.avatorUrl] placeholderImage:[UIImage imageNamed:@"药店默认头像"] options:SDWebImageHighPriority];
        }
        if (displayTimestamp) {
            [cell configureTimeStampLabel:model];
        }
        [cell setupTheBubbleImageView:model];
        cell.headImageView.layer.cornerRadius = MIN(CGRectGetWidth(cell.headImageView.frame)/2, CGRectGetHeight(cell.headImageView.frame)/2);
        return cell;
        
    }else{
        ChatIncomeTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"ChatIncomeTableViewCell"];   //
        cell.chatCellStyle = ChatCellStylePrivateChat;
        cell.superParentViewController = self;
        cell.delegate = msgCenter;
        BOOL displayTimestamp = YES;
        displayTimestamp = [self shouldDisplayTimestampForRowAtIndexPath:indexPath];
        
        [cell setupSubviewsForMessageModel:model];
        cell.displayTimestamp = displayTimestamp;
        cell.messageModel = model;
        [cell updateBubbleViewConsTraint:model];
        
        if (model.messageDeliveryType == MessageTypeSending) {
            [cell.headImageView setImageWithURL:[NSURL URLWithString:QWGLOBALMANAGER.configure.avatarUrl] placeholderImage:[UIImage imageNamed:@"ic_img_notlogin"] options:SDWebImageRefreshCached];
        } else {
            DDLogVerbose(@"the avator url is %@",model.avator);
            [cell.headImageView setImageWithURL:[NSURL URLWithString:model.avatorUrl] placeholderImage:[UIImage imageNamed:@"药店默认头像"] options:SDWebImageHighPriority];
        }
        
        if (displayTimestamp) {
            [cell configureTimeStampLabel:model];
        }
        [cell setupTheBubbleImageView:model];
        cell.headImageView.layer.cornerRadius = MIN(CGRectGetWidth(cell.headImageView.frame)/2, CGRectGetHeight(cell.headImageView.frame)/2);
        return cell;
    }
    //    }
    
}
#pragma mark UITableView Delegate end    >>>>>>>>>>
#pragma mark-



#pragma mark
#pragma mark Tableview and keyborad end    >>>>>>>>>>
#pragma mark - Scroll Message TableView Helper Method

- (void)setTableViewInsetsWithBottomValue:(CGFloat)bottom
{
    UIEdgeInsets insets = [self tableViewInsetsWithBottomValue:bottom];
    self.tableMain.contentInset = insets;
    self.tableMain.scrollIndicatorInsets = insets;
    self.tableMain.header.scrollViewOriginalInset = insets;
    self.tableMain.footer.scrollViewOriginalInset = insets;
}

- (UIEdgeInsets)tableViewInsetsWithBottomValue:(CGFloat)bottom {
    UIEdgeInsets insets = UIEdgeInsetsZero;
    insets.bottom = bottom;
    return insets;
}

//滚动至最后一条消息
- (void)scrollToBottomAnimated:(BOOL)animated {
    if(self.tableMain.tableFooterView == nil) {
        NSInteger rows = [self.tableMain numberOfRowsInSection:0];
        if (rows > 0) {
            [self.tableMain scrollToRowAtIndexPath:[NSIndexPath indexPathForRow:rows - 1 inSection:0]
                                  atScrollPosition:UITableViewScrollPositionBottom
                                          animated:animated];
        }
    }else{
        [self.tableMain scrollRectToVisible:self.tableMain.tableFooterView.frame animated:YES];
    }
}

- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView
{
    self.isUserScrolling = YES;
    
    UIMenuController *menu = [UIMenuController sharedMenuController];
    if (menu.isMenuVisible) {
        [menu setMenuVisible:NO animated:YES];
    }
    
    if (self.textViewInputViewType != XHInputViewTypeNormal && self.textViewInputViewType != XHInputViewTypeText) {
        //        [self layoutOtherMenuViewHiden:YES];
        [self hiddenKeyboard];
    }else if (self.textViewInputViewType == XHInputViewTypeText)
    {
        [self.messageInputView.inputTextView resignFirstResponder];
    }
    
    self.didScrollOrReload = NO;
}

//隐藏键盘,UI调整,表视图下移,表情键盘和扩展键盘隐藏
- (void)hiddenKeyboard
{
    [self.messageInputView.inputTextView resignFirstResponder];
    [self.messageInputView.faceSendButton setSelected:NO];
    [self.messageInputView.multiMediaSendButton setSelected:NO];
    [UIView animateWithDuration:0.2 delay:0 options:UIViewAnimationOptionCurveEaseInOut animations:^{
        
        CGFloat item_Y = 0;
        CGRect otherMenuViewFrame;
        //表情键盘
        item_Y = self.emotionManagerView.frame.origin.y;
        otherMenuViewFrame = self.emotionManagerView.frame;
        if (item_Y < kViewHeight) { //显示在界面上，则隐藏
            otherMenuViewFrame.origin.y = kViewHeight;
            self.emotionManagerView.alpha = 0;
            self.emotionManagerView.frame = otherMenuViewFrame;
            [self setTableViewInsetsWithBottomValue:self.view.frame.size.height
             - self.messageInputView.frame.origin.y - kOffSet];
        }
        //shareMenuView键盘
        item_Y = self.shareMenuView.frame.origin.y;
        otherMenuViewFrame = self.shareMenuView.frame;
        if (item_Y < kViewHeight) { //显示在界面上，则隐藏
            otherMenuViewFrame.origin.y = kViewHeight;
            self.shareMenuView.alpha = 0;
            self.shareMenuView.frame = otherMenuViewFrame;
            [self setTableViewInsetsWithBottomValue:self.view.frame.size.height
             - self.messageInputView.frame.origin.y - kOffSet];
        }
        //输入键盘
        item_Y = self.messageInputView.frame.origin.y;
        otherMenuViewFrame = self.messageInputView.frame;
        if (item_Y < kViewHeight - kInputViewHeight) {
            otherMenuViewFrame.origin.y = kViewHeight - kInputViewHeight;
            self.messageInputView.frame = otherMenuViewFrame;
            [self setTableViewInsetsWithBottomValue:self.view.frame.size.height
             - self.messageInputView.frame.origin.y - kOffSet];
        }
        
    } completion:^(BOOL finished) {
        
    }];
}


- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate {
    self.isUserScrolling = NO;
    
    self.didScrollOrReload = YES;
    if (self.didScrollOrLoad) {
        [self.tableMain reloadData];
        self.didScrollOrLoad = NO;
    }
    [super scrollViewDidEndDragging:scrollView willDecelerate:decelerate];
}

/**
 *  是否显示时间轴Label的回调方法
 *  @param indexPath 目标消息的位置IndexPath
 *  @return 根据indexPath获取消息的Model的对象，从而判断返回YES or NO来控制是否显示时间轴Label
 */
- (BOOL)shouldDisplayTimestampForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    MessageModel *message1 = [msgCenter getMessageByIndex:  indexPath.row];
    if(indexPath.row == 0) {
        return YES;
    }else{
        MessageModel *message0 = [msgCenter getMessageByIndex:indexPath.row - 1];
        NSTimeInterval offset = [message1.timestamp timeIntervalSinceDate:message0.timestamp];
        if(offset >= 300.0)
            return YES;
    }
    return NO;
}

#pragma mark Tableview and keyborad end    >>>>>>>>>>
#pragma mark-


#pragma mark
#pragma mark 初始化工具  start    >>>>>>>>>>
/**
 *  初始化消息界面布局
 */
- (void)initilzer
{
    // 初始化输入工具条
    [self layoutDifferentMessageType];
    // 设置手势滑动，默认添加一个bar的高度值
    self.tableMain.messageInputBarHeight = CGRectGetHeight(_messageInputView.bounds);
}
/**
 *  初始化输入工具条
 */
- (void)layoutDifferentMessageType
{
    CGRect inputFrame = CGRectMake(0.0f,
                                   self.view.frame.size.height - kInputViewHeight,
                                   self.view.frame.size.width,
                                   kInputViewHeight);
    UIView *bottomView = nil;
    
    if (!_messageInputView) {
        _messageInputView = [self setupMessageInputView:inputFrame];
    }
    bottomView = _messageInputView;
    
//    switch (self.showType) {
//        case MessageShowTypeNewCreate:
//        {
//            bottomView = _messageInputView;
//            break;
//        }
//        case MessageShowTypeAnswering:
//        {
//            //            self.headerHintView = [self setupCountDownHeaderView];
//            CGRect rect = self.tableMain.frame;
//            rect.origin.y = 55;
//            rect.size.height -= 55;
//            self.tableMain.frame = rect;
//            //            [self.view addSubview:self.headerHintView];
//            //            [self performSelector:@selector(delayDismissHeaderHint) withObject:nil afterDelay:5.0];
//            bottomView = _messageInputView;
//            break;
//        }
//        case MessageShowTypeClosed:
//        {
//            //bottomView = [self setupClosedBottomView:inputFrame];
//            CGRect rect = self.tableMain.frame;
//            rect.origin.y = 55;
//            rect.size.height -= 55;
//            self.tableMain.frame = rect;
//            
//            break;
//        }
//        case MessageShowTypeTimeout:
//        {
//            //bottomView = [self setupTimeoutBottomView:inputFrame];
//            CGRect rect = self.tableMain.frame;
//            rect.origin.y = 0;
//            rect.size.height = self.view.frame.size.height;
//            self.tableMain.frame = rect;
//            
//            break;
//        }
//        case MessageShowTypeDiffusion:
//        {
//            CGRect rect = self.tableMain.frame;
//            rect.origin.y = 0;
//            rect.size.height = self.view.frame.size.height;
//            self.tableMain.frame = rect;
//            break;
//        }
//        default:
//            break;
//    }
    if(bottomView) {
        [self.view addSubview:bottomView];
        [self.view bringSubviewToFront:bottomView];
    }
    
}

/**
 *  单例初始化输入工具条XHMessageInputView
 */
- (XHMessageInputView *)setupMessageInputView:(CGRect)inputFrame
{
    XHMessageInputView *inputView = [[XHMessageInputView alloc] initWithFrame:inputFrame];
    inputView.allowsSendFace = allowsSendFace;
    inputView.allowsSendVoice = allowsSendVoice;
    inputView.allowsSendMultiMedia = allowsSendMultiMedia;
    inputView.delegate = self;
    return inputView;
}

#pragma mark - XHMessageInputView Delegate
- (void)inputTextViewWillBeginEditing:(XHMessageTextView *)messageInputTextView
{
    self.textViewInputViewType = XHInputViewTypeText;
}

- (void)inputTextViewDidBeginEditing:(XHMessageTextView *)messageInputTextView
{
    if (!self.previousTextViewContentHeight)
        self.previousTextViewContentHeight = [self getTextViewContentH:messageInputTextView];
}

//获取textView的高度
- (CGFloat)getTextViewContentH:(UITextView *)textView {
    if (iOSv7) {
        //        return ceilf([textView sizeThatFits:textView.frame.size].height);
        CGRect textFrame=[[textView layoutManager] usedRectForTextContainer:[textView textContainer]];
        return textFrame.size.height - 18;
    } else {
        return textView.contentSize.height;
    }
}

#pragma mark 初始化工具  end      >>>>>>>>>>
#pragma mark-

#pragma mark-
#pragma mark ShareMenu  start    >>>>>>>>>>
/**
 *  单例初始化shareMenuView
 */
- (XHShareMenuView *)shareMenuView {
    if (!_shareMenuView) {
        XHShareMenuView *shareMenuView = [[XHShareMenuView alloc] initWithFrame:CGRectMake(0, kViewHeight, CGRectGetWidth(self.view.bounds), kShareMenuHeight)];
        shareMenuView.delegate = self;
        shareMenuView.backgroundColor = [UIColor colorWithWhite:0.961 alpha:1.000];
        shareMenuView.alpha = 0.0;
        shareMenuView.shareMenuItems = self.shareMenuItems;
        [self.view addSubview:shareMenuView];
        _shareMenuView = shareMenuView;
    }
    //    [self.view bringSubviewToFront:_shareMenuView];
    return _shareMenuView;
}

- (void)setUpSharedMenuItem
{
    // 添加第三方接入数据
    NSMutableArray *shareMenuItems = [NSMutableArray array];
    NSArray *plugIcons = @[@"photo_image.png",@"take_photo_image.png"];//,@"ic_btn_medical.png",@"ic_btn_collect_sale.png"
    NSArray *plugTitle = @[@"图片",@"拍照"];//,@"药品",@"我收藏的优惠"
    for (NSString *plugIcon in plugIcons) {
        XHShareMenuItem *shareMenuItem = [[XHShareMenuItem alloc] initWithNormalIconImage:[UIImage imageNamed:plugIcon] title:[plugTitle objectAtIndex:[plugIcons indexOfObject:plugIcon]]];
        [shareMenuItems addObject:shareMenuItem];
    }
    self.shareMenuItems = shareMenuItems;
    [self.shareMenuView reloadData];
}

#pragma mark （action）点击“+”号键盘里地单个功能触发的事件
- (void)didSelecteShareMenuItem:(XHShareMenuItem *)shareMenuItem atIndex:(NSInteger)index {
    switch (index) {
        case 0: {
            ALAuthorizationStatus author = [ALAssetsLibrary authorizationStatus];
            if(author == ALAuthorizationStatusRestricted || author == ALAuthorizationStatusDenied) {
                [SVProgressHUD showErrorWithStatus:@"当前程序未开启相册使用权限" duration:0.8];
                return;
            }
            [self LocalPhoto];
            break;
        }
        case 1: {
            AVAuthorizationStatus authStatus = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];
            if(authStatus == ALAuthorizationStatusRestricted || authStatus == ALAuthorizationStatusDenied){
                [SVProgressHUD showErrorWithStatus:@"当前程序未开启相机使用权限" duration:0.8];
                return;
            }
            [self takePhoto];
            break;
        }
        case 2: {
            //发送药品
            
            QuickSearchDrugViewController *quickSearchDrugViewController = [QuickSearchDrugViewController new];
            quickSearchDrugViewController.returnValueBlock = ^(productclassBykwId *model){
                
                MessageModel *medicineModel = [[MessageModel alloc] initWithMedicine:model.proName
                                                                           productId:model.proId
                                                                            imageUrl:model.imgUrl
                                                                              sender:self.messageSender
                                                                           timestamp:[NSDate date]
                                                                                UUID:[XMPPStream generateUUID]];
                [self sendMessage:medicineModel messageBodyType:MessageMediaTypeMedicine];
                [self.navigationController popToViewController:self animated:YES];
            };
            [self.navigationController pushViewController:quickSearchDrugViewController animated:NO];
            break;
        }
        default:
            break;
    }
}
#pragma mark ShareMenu  end      >>>>>>>>>>
#pragma mark-


#pragma mark-
#pragma mark    语音    start  <<<<<<<<
#pragma mark - XHVoiceRecordHUD Helper Method

- (void)didChangeSendVoiceAction:(BOOL)changed
{
    DebugLog(@"%s",__FUNCTION__);
    [self scrollToBottomAnimated:YES];
    if (changed) {
        self.textViewInputViewType = XHInputViewTypeVoice;
        [self layoutOtherMenuViewHide:NO fromInputView:NO];
        [self scrollToBottomAnimated:YES];
    } else {
        [self.messageInputView.inputTextView becomeFirstResponder];
    }
}


//录音帮助类的getter方法
- (XHVoiceRecordHelper *)voiceRecordHelper {
    if (!_voiceRecordHelper) {
        _isMaxTimeStop = NO;
        
        WEAKSELF
        _voiceRecordHelper = [[XHVoiceRecordHelper alloc] init];
        _voiceRecordHelper.maxTimeStopRecorderCompletion = ^{
            DLog(@"已经达到最大限制时间了，进入下一步的提示");
            
            // Unselect and unhilight the hold down button, and set isMaxTimeStop to YES.
            UIButton *holdDown = weakSelf.messageInputView.holdDownButton;
            holdDown.selected = NO;
            holdDown.highlighted = NO;
            weakSelf.isMaxTimeStop = YES;
            
            [weakSelf finishRecorded];
        };
        _voiceRecordHelper.peakPowerForChannel = ^(float peakPowerForChannel,float remainTime) {
            [weakSelf.voiceRecordHUD setPeakPower:peakPowerForChannel remainTime:remainTime];
        };
        _voiceRecordHelper.maxRecordTime = kVoiceRecorderTotalTime;
    }
    return _voiceRecordHelper;
}

//录音HUD的getter方法
- (XHVoiceRecordHUD *)voiceRecordHUD {
    if (!_voiceRecordHUD) {
        _voiceRecordHUD = [[XHVoiceRecordHUD alloc] initWithFrame:CGRectMake(0, 0, 140, 140)];
    }
    return _voiceRecordHUD;
}

#pragma mark - Voice Recording Helper Method
//获取录音的保存路径
- (NSString *)getRecorderPath {
    NSString *recorderPath = nil;
    recorderPath = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) objectAtIndex: 0];
    NSDate *now = [NSDate date];
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    [dateFormatter setDateFormat:@"yyyyMMddHHmmssSSS"];
    recorderPath = [recorderPath stringByAppendingFormat:@"%@-MySound.caf", [dateFormatter stringFromDate:now]];
    return recorderPath;
}

#pragma mark - XHVoiceRecordHUD Helper Method

#pragma mark - Voice Recording Helper Method

- (void)prepareRecordWithCompletion:(XHPrepareRecorderCompletion)completion {
    [self.voiceRecordHelper prepareRecordingWithPath:[self getRecorderPath] prepareRecorderCompletion:completion];
}

- (void)startRecord {
    [self.voiceRecordHUD startRecordingHUDAtView:self.view];
    [self.voiceRecordHelper startRecordingWithStartRecorderCompletion:^{
        //开始录音后,需要暂停播放中的语音(fix 测试提的bug)
        [self stopMusicInOtherBubblePressed];
    }];
}

- (void)finishRecorded {
    WEAKSELF
    [self.voiceRecordHUD stopRecordCompled:^(BOOL fnished) {
        weakSelf.voiceRecordHUD = nil;
    }];
    [self.voiceRecordHelper stopRecordingWithStopRecorderCompletion:^{
        //录音结束后,少于1秒的提示过短,不予以发送,防止误点,每点一次发送,容易crash
        if([weakSelf.voiceRecordHelper.recordDuration doubleValue] < 1.0) {
            [SVProgressHUD showErrorWithStatus:@"录音时间过短!" duration:0.8];
            return;
        }
        NSString *UUID = [XMPPStream generateUUID];
        //amrLib 将PCM格式数据转成amr
        NSData *amrData = [weakSelf.voiceRecordHelper convertCafToAmr:[NSData dataWithContentsOfFile:weakSelf.voiceRecordHelper.recordPath]];
        //以UUID作为路径名保存amr语音格式
        //~/Document/username/Voice/UUID.amr
        NSString *audioPath = [NSHomeDirectory() stringByAppendingPathComponent:[NSString stringWithFormat: @"Documents/%@/Voice/%@.amr",QWGLOBALMANAGER.configure.userName,UUID]];
        [amrData writeToFile:audioPath atomically:YES];
        NSFileManager *manager = [NSFileManager defaultManager];
        [manager removeItemAtPath:weakSelf.voiceRecordHelper.recordPath error:nil];
        [self didSendAudio:@"[语音]" voicePath:audioPath audioUrl:nil duartion:weakSelf.voiceRecordHelper.recordDuration fromSender:self.messageSender onDate:[NSDate date] UUID:UUID];
        
    }];
}
/**
 *  发送语音的回调方法
 *
 *  @param text              语音文本
 *  @param audioUrl          语音地址
 *  @param duartion          语音长度
 *  @param sender            发送者
 *  @param date              发送时间
 */
- (void)didSendAudio:(NSString *)text
           voicePath:(NSString *)voicePath
            audioUrl:(NSString *)audioUrl
            duartion:(NSString *)duartion
          fromSender:(NSString *)sender
              onDate:(NSDate *)date
                UUID:(NSString *)UUID
{
    MessageModel *messageModel = [[MessageModel alloc] initWithVoicePath:voicePath voiceUrl:audioUrl voiceDuration:duartion sender:sender timestamp:date UUID:UUID];
    [self sendMessage:messageModel messageBodyType:MessageMediaTypeVoice];
}

- (void)pauseRecord {
    [self.voiceRecordHUD pauseRecord];
}

- (void)resumeRecord {
    [self.voiceRecordHUD resaueRecord];
}

- (void)cancelRecord {
    WEAKSELF
    [self.voiceRecordHUD cancelRecordCompled:^(BOOL fnished) {
        weakSelf.voiceRecordHUD = nil;
    }];
    [self.voiceRecordHelper cancelledDeleteWithCompletion:^{
        
    }];
}
- (void)prepareRecordingVoiceActionWithCompletion:(BOOL (^)(void))completion {
    [self prepareRecordWithCompletion:completion];
}

- (void)didStartRecordingVoiceAction {
    [self startRecord];
}

- (void)didCancelRecordingVoiceAction {
    [self cancelRecord];
}

- (void)didFinishRecoingVoiceAction {
    DLog(@"didFinishRecoingVoice");
    if (self.isMaxTimeStop == NO) {
        [self finishRecorded];
    } else {
        self.isMaxTimeStop = NO;
    }
}

- (void)didDragOutsideAction {
    [self resumeRecord];
}

- (void)didDragInsideAction {
    [self pauseRecord];
}

#pragma mark XHAudioPlayerHelperDelegate
- (void)didAudioPlayerBeginPlay:(AVAudioPlayer*)audioPlayer
{
    
}

- (void)didAudioPlayerStopPlay:(AVAudioPlayer*)audioPlayer
{
    [self stopMusicInOtherBubblePressed];
}

- (void)didAudioPlayerPausePlay:(AVAudioPlayer*)audioPlayer
{
    
}

#pragma mark    语音    end  >>>>>>viewdid
#pragma mark-

#pragma mark-
#pragma mark 拍照    start  <<<<<<<<

-(void)takePhoto
{
    if ([UIImagePickerController isSourceTypeAvailable: UIImagePickerControllerSourceTypeCamera])
    {
        [self performSelector:@selector(showcamera) withObject:nil afterDelay:0.3];
    }else{
        DDLogVerbose(@"模拟其中无法打开照相机,请在真机中使用");
    }
}

-(void)showcamera
{
    UIImagePickerController * picker = [[UIImagePickerController alloc] init];
    picker.delegate = self;
    
    if ([[[UIDevice currentDevice] systemVersion] floatValue]>=8.0) {
        
    }
    picker.sourceType = UIImagePickerControllerSourceTypeCamera;
    [self presentViewController:picker animated:YES completion:^{
        
    }];
}

- (void)navigationController:(UINavigationController *)navigationController willShowViewController:(UIViewController *)viewController animated:(BOOL)animated
{
    if ([navigationController isKindOfClass:[UIImagePickerController class]] &&
        ((UIImagePickerController *)navigationController).sourceType ==     UIImagePickerControllerSourceTypePhotoLibrary) {
        [[UIApplication sharedApplication] setStatusBarHidden:NO];
        [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleLightContent animated:NO];
    }
}
- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info
{
    
    UIImage *image = [info objectForKey:UIImagePickerControllerOriginalImage];
    image = [image imageByScalingToMinSize];
    image = [UIImage scaleAndRotateImage:image];
    
    [self didChoosePhoto:image];
    [picker dismissViewControllerAnimated:YES completion:nil];
}

- (void)dismissViewControllerAnimated:(BOOL)flag completion:(void (^)(void))completion
{
    
}
- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker
{
    [picker dismissViewControllerAnimated:YES completion:NULL];
}

#pragma mark 拍照    end   >>>>>>>>>
#pragma mark-

#pragma mark-
#pragma mark 选择图片  start    <<<<<<<
- (void)LocalPhoto
{
    UIStoryboard *sb = [UIStoryboard storyboardWithName:@"PhotoAlbum" bundle:nil];
    PhotoAlbum* vc = [sb instantiateViewControllerWithIdentifier:@"PhotoAlbum"];
    [vc selectPhotos:4 selected:nil block:^(NSMutableArray *list) {
        for (PhotoModel *mode in list) {
            if (mode.fullImage) {
                UIImage *image=mode.fullImage;
                [self didChoosePhoto:image];
            }
        }
    } failure:^(NSError *error) {
        DebugLog(@"%@",error);
        [vc closeAction:nil];
    }];
    
    UINavigationController *nav = [[QWBaseNavigationController alloc] initWithRootViewController:vc];
    [self presentViewController:nav animated:YES completion:^{
    }];
}

-(void)didChoosePhoto:(UIImage *)img
{
    NSString *UUID = [XMPPStream generateUUID];
    [[SDImageCache sharedImageCache] storeImage:img forKey:UUID toDisk:YES];
    if (![[SDImageCache sharedImageCache] diskImageExistsWithKey:UUID]) {
        [[SDImageCache sharedImageCache] storeImage:img forKey:UUID toDisk:YES];
    }
    
    MessageModel *model = [[MessageModel alloc] initWithPhoto:img thumbnailUrl:nil originPhotoUrl:nil sender:self.messageSender timestamp:[NSDate date] UUID:UUID richBody:nil];
    [self sendMessage:model messageBodyType:MessageMediaTypePhoto];
    
}

#pragma mark 选择图片  end     >>>>>>>
#pragma mark-


#pragma mark-
#pragma mark 设置键盘bolock start     >>>>>>>>>>
- (void)initKeyboardBlock
{
    WEAKSELF
    if (allowsPanToDismissKeyboard) {
        // 控制输入工具条的位置块
        void (^AnimationForMessageInputViewAtPoint)(CGPoint point) = ^(CGPoint point) {
            CGRect inputViewFrame = weakSelf.messageInputView.frame;
            CGPoint keyboardOrigin = [weakSelf.view convertPoint:point fromView:nil];
            inputViewFrame.origin.y = keyboardOrigin.y - inputViewFrame.size.height;
            weakSelf.messageInputView.frame = inputViewFrame;
        };
        
        self.tableMain.keyboardDidScrollToPoint = ^(CGPoint point) {
            if (weakSelf.textViewInputViewType == XHInputViewTypeText)
                AnimationForMessageInputViewAtPoint(point);
        };
        
        self.tableMain.keyboardWillSnapBackToPoint = ^(CGPoint point) {
            if (weakSelf.textViewInputViewType == XHInputViewTypeText)
                AnimationForMessageInputViewAtPoint(point);
        };
        
        self.tableMain.keyboardWillBeDismissed = ^() {
            CGRect inputViewFrame = weakSelf.messageInputView.frame;
            inputViewFrame.origin.y = weakSelf.view.bounds.size.height - inputViewFrame.size.height;
            weakSelf.messageInputView.frame = inputViewFrame;
        };
    }
    
    // block回调键盘通知
    self.tableMain.keyboardWillChange = ^(CGRect keyboardRect, UIViewAnimationOptions options, double duration, BOOL showKeyborad) {
        if (weakSelf.textViewInputViewType == XHInputViewTypeText) {
            [UIView animateWithDuration:duration
                                  delay:0.0
                                options:options
                             animations:^{
                                 CGFloat keyboardY = [weakSelf.view convertRect:keyboardRect fromView:nil].origin.y;
                                 
                                 CGRect inputViewFrame = weakSelf.messageInputView.frame;
                                 CGFloat inputViewFrameY = keyboardY - inputViewFrame.size.height;
                                 
                                 // for ipad modal form presentations
                                 CGFloat messageViewFrameBottom = weakSelf.view.frame.size.height - inputViewFrame.size.height;
                                 if (inputViewFrameY > messageViewFrameBottom)
                                     inputViewFrameY = messageViewFrameBottom;
                                 
                                 weakSelf.messageInputView.frame = CGRectMake(inputViewFrame.origin.x,
                                                                              inputViewFrameY,
                                                                              inputViewFrame.size.width,
                                                                              inputViewFrame.size.height);
                                 //ok
                                 [weakSelf setTableViewInsetsWithBottomValue:weakSelf.view.frame.size.height
                                  - weakSelf.messageInputView.frame.origin.y - kOffSet];
                                 if (showKeyborad)
                                     [weakSelf scrollToBottomAnimated:NO];
                             }
                             completion:nil];
        }
    };
    
    self.tableMain.keyboardDidChange = ^(BOOL didShowed) {
        if ([weakSelf.messageInputView.inputTextView isFirstResponder]) {
            if (didShowed) {
                if (weakSelf.textViewInputViewType == XHInputViewTypeText) {
                    weakSelf.shareMenuView.alpha = 0.0;
                    weakSelf.emotionManagerView.alpha = 0.0;
                }
            }
        }
    };
    
    self.tableMain.keyboardDidHide = ^() {
        [weakSelf.messageInputView.inputTextView resignFirstResponder];
    };
}

//更新键盘类型
- (void)layoutOtherMenuViewHiden:(BOOL)hide {
    [self layoutOtherMenuViewHide:hide fromInputView:YES];
    [self scrollToBottomAnimated:YES];
}

#pragma mark - Other Menu View Frame Helper Mehtod
/**
 *  Description
 *
 *  @param hide 是否隐藏
 *  @param from
 */
- (void)layoutOtherMenuViewHide:(BOOL)hide fromInputView:(BOOL)from {
    [self.messageInputView.inputTextView resignFirstResponder];
    [UIView animateWithDuration:0.2 delay:0 options:UIViewAnimationOptionCurveEaseInOut animations:^{
        __block CGRect inputViewFrame = self.messageInputView.frame;
        __block CGRect otherMenuViewFrame;
        
        void (^InputViewAnimation)(BOOL hide) = ^(BOOL hide) {
            inputViewFrame.origin.y = (hide ? (CGRectGetHeight(self.view.bounds) - CGRectGetHeight(inputViewFrame)) : (CGRectGetMinY(otherMenuViewFrame) - CGRectGetHeight(inputViewFrame)));
            self.messageInputView.frame = inputViewFrame;
        };
        
        void (^EmotionManagerViewAnimation)(BOOL hide) = ^(BOOL hide) {
            otherMenuViewFrame = self.emotionManagerView.frame;
            otherMenuViewFrame.origin.y = (hide ? CGRectGetHeight(self.view.frame) : (CGRectGetHeight(self.view.frame) - CGRectGetHeight(otherMenuViewFrame)));
            self.emotionManagerView.alpha = !hide;
            self.emotionManagerView.frame = otherMenuViewFrame;
        };
        
        void (^ShareMenuViewAnimation)(BOOL hide) = ^(BOOL hide) {
            otherMenuViewFrame = self.shareMenuView.frame;
            otherMenuViewFrame.origin.y = (hide ? CGRectGetHeight(self.view.frame) : (CGRectGetHeight(self.view.frame) - CGRectGetHeight(otherMenuViewFrame)));
            self.shareMenuView.alpha = !hide;
            self.shareMenuView.frame = otherMenuViewFrame;
        };
        
        if (hide) {
            switch (self.textViewInputViewType) {
                case XHInputViewTypeEmotion: {
                    EmotionManagerViewAnimation(hide);
                    break;
                }
                case XHInputViewTypeShareMenu: {
                    ShareMenuViewAnimation(hide);
                    break;
                }
                default:
                    break;
            }
        } else {
            
            // 这里需要注意block的执行顺序，因为otherMenuViewFrame是公用的对象，所以对于被隐藏的Menu的frame的origin的y会是最大值
            switch (self.textViewInputViewType) {
                case XHInputViewTypeEmotion: {
                    // 1、先隐藏和自己无关的View
                    ShareMenuViewAnimation(!hide);
                    // 2、再显示和自己相关的View
                    EmotionManagerViewAnimation(hide);
                    break;
                }
                case XHInputViewTypeShareMenu: {
                    // 1、先隐藏和自己无关的View
                    EmotionManagerViewAnimation(!hide);
                    // 2、再显示和自己相关的View
                    ShareMenuViewAnimation(hide);
                    break;
                }
                case XHInputViewTypeVoice:{
                    ShareMenuViewAnimation(!hide);
                    EmotionManagerViewAnimation(!hide);
                    break;
                }
                default:
                    break;
            }
        }
        
        InputViewAnimation(hide);
        //        CGFloat offset = self.view.frame.size.height - self.messageInputView.frame.origin.y - kOffSet;
        CGFloat offset = self.view.frame.size.height - self.messageInputView.frame.origin.y - 42;
        DDLogVerbose(@"offset = %f",offset);
        [self setTableViewInsetsWithBottomValue:offset];
        
        [self scrollToBottomAnimated:NO];
    } completion:^(BOOL finished) {
        
    }];
}

#pragma mark - Key-value Observing

- (void)observeValueForKeyPath:(NSString *)keyPath
                      ofObject:(id)object
                        change:(NSDictionary *)change
                       context:(void *)context
{
    if (object == self.messageInputView.inputTextView && [keyPath isEqualToString:@"contentSize"])
    {
        [self layoutAndAnimateMessageInputTextView:object];
    }
}

#pragma mark - Layout Message Input View Helper Method

- (void)layoutAndAnimateMessageInputTextView:(UITextView *)textView {
    CGFloat maxHeight = [XHMessageInputView maxHeight];
    
    CGFloat contentH = [self getTextViewContentH:textView];
    
    BOOL isShrinking = contentH < self.previousTextViewContentHeight;
    CGFloat changeInHeight = contentH - _previousTextViewContentHeight;
    
    if (!isShrinking && (self.previousTextViewContentHeight == maxHeight || textView.text.length == 0)) {
        changeInHeight = 0;
    }
    else {
        changeInHeight = MIN(changeInHeight, maxHeight - self.previousTextViewContentHeight);
    }
    
    if (changeInHeight != 0.0f) {
        [UIView animateWithDuration:0.25f animations:^{
            //OK
            [self setTableViewInsetsWithBottomValue:self.tableMain.contentInset.bottom + changeInHeight];
            [self scrollToBottomAnimated:NO];
            
            if (isShrinking) {
                if ([[[UIDevice currentDevice] systemVersion] floatValue] < 7.0) {
                    self.previousTextViewContentHeight = MIN(contentH, maxHeight);
                }
                // if shrinking the view, animate text view frame BEFORE input view frame
                [self.messageInputView adjustTextViewHeightBy:changeInHeight];
            }
            
            CGRect inputViewFrame = self.messageInputView.frame;
            self.messageInputView.frame = CGRectMake(0.0f,
                                                     inputViewFrame.origin.y - changeInHeight,
                                                     inputViewFrame.size.width,
                                                     inputViewFrame.size.height + changeInHeight);
            if (!isShrinking) {
                if ([[[UIDevice currentDevice] systemVersion] floatValue] < 7.0) {
                    self.previousTextViewContentHeight = MIN(contentH, maxHeight);
                }
                // growing the view, animate the text view frame AFTER input view frame
                [self.messageInputView adjustTextViewHeightBy:changeInHeight];
            }
        }
                         completion:^(BOOL finished) {
                         }];
        
        self.previousTextViewContentHeight = MIN(contentH, maxHeight);
    }
    
    // Once we reached the max height, we have to consider the bottom offset for the text view.
    // To make visible the last line, again we have to set the content offset.
    if (self.previousTextViewContentHeight == maxHeight) {
        double delayInSeconds = 0.01;
        dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
        dispatch_after(popTime,
                       dispatch_get_main_queue(),
                       ^(void) {
                           //                           CGPoint bottomOffset = CGPointMake(0.0f, );
                           CGPoint bottomOffset = CGPointMake(0.0f, contentH - textView.bounds.size.height/2 - 13);
                           [textView setContentOffset:bottomOffset animated:YES];
                       });
    }
}

#pragma mark 设置键盘bolock end       >>>>>>>>>>
#pragma mark-

#pragma mark
#pragma mark （Action）点击加号“+”
/**
 *  发送多媒体
 */
- (void)didSelectedMultipleMediaAction:(BOOL)selected
{
    DebugLog(@"%s",__FUNCTION__);
    self.textViewInputViewType = XHInputViewTypeShareMenu;
    if(self.shareMenuView.alpha == 1.0) {
        [self.messageInputView.inputTextView becomeFirstResponder];
    }else{
        [self layoutOtherMenuViewHiden:NO];
    }
}

#pragma mark
#pragma mark （Action）调出表情键盘
/**
 *  发送表情
 */
- (void)didSendFaceAction:(BOOL)sendFace
{
    DebugLog(@"%s",__FUNCTION__);
    [self scrollToBottomAnimated:YES];
    if (sendFace) {
        self.textViewInputViewType = XHInputViewTypeEmotion;
        [self layoutOtherMenuViewHide:NO fromInputView:NO];
        [self scrollToBottomAnimated:YES];
    } else {
        [self.messageInputView.inputTextView becomeFirstResponder];
    }
}

#pragma mark
#pragma mark （Action）点击表情键盘中的发送按钮
- (void)didSendEmojiTextMessage:(id)sender
{
    [self statisticsEvent_SendMsg];
    if([QWGLOBALMANAGER removeSpace:self.messageInputView.inputTextView.text].length == 0)
        return;
    MessageModel *emojiModel = [[MessageModel alloc] initWithText:self.messageInputView.inputTextView.text
                                                           sender:self.messageSender
                                                        timestamp:[NSDate date]
                                                             UUID:[XMPPStream generateUUID]];
    [self sendMessage:emojiModel messageBodyType:MessageMediaTypeText];
    [self finishSendMessageWithBubbleMessageType:MessageMediaTypeText];
}

/**
 *  初始化表情manager,最好能做成异步(暂时不处理)
 */
- (void)setUpEmojiManager
{
    NSString *emojiPath = [[NSBundle mainBundle] pathForResource:@"expressionImage_custom" ofType:@"plist"];
    NSMutableDictionary *emotionDict = [[NSMutableDictionary alloc] initWithContentsOfFile:emojiPath];
    NSArray *allKeys = [emotionDict allKeys];
    XHEmotionManager *emotionManager = [[XHEmotionManager alloc] init];
    NSMutableArray *emotionManagers = [NSMutableArray arrayWithCapacity:100];
    
#define ROW_NUM     3
#define COLUMN_NUM  7
    for(NSUInteger index = 0; index < [allKeys count]; ++index)
    {
        NSString *key = allKeys[index];
        if(index != 0 && (index % (ROW_NUM * COLUMN_NUM - 1)) == 0){
            [emotionManager.emotions addObject:[self addDeleteItem]];
        }
        XHEmotionManager *subEmotion = [[XHEmotionManager alloc] init];
        subEmotion.emotionName = key;
        subEmotion.imageName = emotionDict[key];
        [emotionManager.emotions addObject:subEmotion];
        if (index == [allKeys count] - 1)
        {
            [emotionManager.emotions addObject:[self addDeleteItem]];
        }
    }
    [emotionManagers addObject:emotionManager];
    self.emotionManagers = emotionManagers;
    [self.emotionManagerView reloadData];
}

#pragma mark
#pragma mark 初始化表情emotionManagerView
- (XHEmotionManagerView *)emotionManagerView {
    if (!_emotionManagerView) {
        XHEmotionManagerView *emotionManagerView = [[XHEmotionManagerView alloc] initWithFrame:CGRectMake(0, kViewHeight, CGRectGetWidth(self.view.bounds), kEmojiKeyboardHeight)];
        emotionManagerView.delegate = self;
        emotionManagerView.dataSource = self;
        emotionManagerView.backgroundColor = [UIColor colorWithWhite:0.961 alpha:1.000];
        emotionManagerView.alpha = 0.0;
        [self.view addSubview:emotionManagerView];
        [emotionManagerView.emotionSectionBar.storeManagerItemButton addTarget:self action:@selector(didSendEmojiTextMessage:) forControlEvents:UIControlEventTouchDown];
        _emotionManagerView.userInteractionEnabled = YES;
        _emotionManagerView = emotionManagerView;
        
    }
    [self.view bringSubviewToFront:_emotionManagerView];
    return _emotionManagerView;
}

- (XHEmotionManager *)addDeleteItem
{
    XHEmotionManager *subEmotion = [[XHEmotionManager alloc] init];
    subEmotion.emotionName = @"删除";
    subEmotion.imageName = @"backFaceSelect";
    return subEmotion;
}

#pragma mark - XHEmotionManagerView DataSource

- (NSInteger)numberOfEmotionManagers
{
    return self.emotionManagers.count;
}
- (XHEmotionManager *)emotionManagerForColumn:(NSInteger)column
{
    return [self.emotionManagers objectAtIndex:column];
}
- (NSArray *)emotionManagersAtManager
{
    return self.emotionManagers;
}


#pragma mark
#pragma mark 点击单个表情触发事件
- (void)didSelecteEmotion:(XHEmotion *)emotion atIndexPath:(NSIndexPath *)indexPath
{
    if (emotion.emotionPath) {
        NSString *text = self.messageInputView.inputTextView.text;
        if([emotion.emotionPath isEqualToString:@"删除"])
        {
            NSString *scanString = [NSString stringWithString:text];
            NSUInteger count = 0;
            while (scanString.length > 0)
            {
                NSString *lastString = [scanString substringWithRange:NSMakeRange(scanString.length - 1, 1)];
                if([lastString isEqualToString:@"["] && scanString.length >= 1)
                {
                    text = [scanString substringToIndex:scanString.length - 1];
                    self.messageInputView.inputTextView.text = text;
                    return;
                }
                count++;
                if(count >= 4)
                    break;
                scanString = [scanString substringToIndex:scanString.length - 1];
            }
            if(text.length > 0){
                text = [text substringToIndex:text.length - 1];
                self.messageInputView.inputTextView.text = text;
            }
        }else{
            text = [text stringByAppendingString:emotion.emotionPath];
            self.messageInputView.inputTextView.text = text;
        }
    }
}


#pragma mark
#pragma mark 消息发送中心
- (void)sendMessage:(MessageModel *)messageModel messageBodyType:(MessageBodyType)messageType
{
    switch (messageType) {
        case MessageMediaTypeText:   //发送纯文本
        {
            [msgCenter sendMessage:messageModel success:^(id successObj) {
                [self messageToCircleChatPoint:messageModel sendState:MessageDeliveryState_Delivered];
            } failure:^(id failureObj) {
                [self messageToCircleChatPoint:messageModel sendState:MessageDeliveryState_Failure];
                [self.tableMain reloadData];
            }];
        }
            break;
        case MessageMediaTypePhoto:     //发送图片
        {
//                        [self progressUpdate:messageModel.UUID progress:0];
            [msgCenter sendFileMessage:messageModel success:^(id successObj) {
                NSIndexPath *indexPath = [NSIndexPath indexPathForRow:[msgCenter getMessageIndex:messageModel] inSection:0];
                ChatOutgoingTableViewCell *cell = (ChatOutgoingTableViewCell *)[self.tableMain cellForRowAtIndexPath:indexPath];
                ((PhotoChatBubbleView *)cell.bubbleView).dpMeterView.activeShow.hidden = YES;
                ((PhotoChatBubbleView *)cell.bubbleView).dpMeterView.hidden = YES;
                ((PhotoChatBubbleView *)cell.bubbleView).dpMeterView.progressLabel.text = [NSString stringWithFormat:@"%d%@",0,@"%"];
                [self messageToCircleChatPoint:messageModel sendState:MessageDeliveryState_Delivered];
                [self.tableMain reloadData];
            } failure:^(id failureObj) {
                NSIndexPath *indexPath = [NSIndexPath indexPathForRow:[msgCenter getMessageIndex:messageModel] inSection:0];
                ChatOutgoingTableViewCell *cell = (ChatOutgoingTableViewCell *)[self.tableMain cellForRowAtIndexPath:indexPath];
                
                ((PhotoChatBubbleView *)cell.bubbleView).dpMeterView.activeShow.hidden = YES;
                ((PhotoChatBubbleView *)cell.bubbleView).dpMeterView.hidden = YES;
                ((PhotoChatBubbleView *)cell.bubbleView).dpMeterView.progressLabel.text = [NSString stringWithFormat:@"%d%@",0,@"%"];
                [self.tableMain reloadData];
                [self messageToCircleChatPoint:messageModel sendState:MessageDeliveryState_Failure];
            } uploadProgressBlock:^(MessageModel *target, float progress) {
                
                [self progressUpdate:messageModel.UUID progress:progress];
                
            }];
            break;
        }
        case MessageMediaTypeMedicineSpecialOffers:
        {
            [msgCenter sendMessage:messageModel success:^(id successObj) {
                [self messageToCircleChatPoint:messageModel sendState:MessageDeliveryState_Delivered];
                [self.tableMain reloadData];
            } failure:^(id failureObj) {
                [self.tableMain reloadData];
                [self messageToCircleChatPoint:messageModel sendState:MessageDeliveryState_Failure];
            }];
            break;
        }
        case MessageMediaTypeCoupon:
        case MessageMediaTypeMedicineCoupon:
        case MessageMediaMallMedicine:
        case MessageMediaTypeMedicine: {
            [msgCenter sendMessage:messageModel success:^(id successObj) {
                [self messageToCircleChatPoint:messageModel sendState:MessageDeliveryState_Delivered];
                [self.tableMain reloadData];
            } failure:^(id failureObj) {
                [self.tableMain reloadData];
                [self messageToCircleChatPoint:messageModel sendState:MessageDeliveryState_Failure];
            }];
            break;
        }
        case MessageMediaTypeVoice:{
            //note by meng ，等待消息bubble调试完成后打开
            //发送语音文件，add by yqy
            [msgCenter sendFileMessage:messageModel success:^(id successObj) {
                [self messageToCircleChatPoint:messageModel sendState:MessageDeliveryState_Delivered];
                [self.tableMain reloadData];
            } failure:^(id failureObj) {
                //                messageModel.sended=MessageDeliveryState_Failure;
                [self.tableMain reloadData];
                [self messageToCircleChatPoint:messageModel sendState:MessageDeliveryState_Failure];
            } uploadProgressBlock:^(MessageModel *target, float progress) {
                
                
            }];
            break;
        }
            break;
        default:
            break;
    }
    [self messageToCircleChatPoint:messageModel sendState:MessageDeliveryState_Delivering];
}

//将MessageModel转换成CircleChatPointModel,并保存至DB
- (void)messageToCircleChatPoint:(MessageModel*)messageModel sendState:(MessageDeliveryState)sendState
{
    // 判断sessionID不为空，而且必须是NSString类型的 ， 反之谁传个其他的值过来，比如陈志鹏创一个NSNumber，就会报错。 ！！
    if (StrIsEmpty(self.sessionID) || ![self.sessionID isKindOfClass:[NSString class]]) {
        return;
    }
    CircleChatPointModel* chatPoint = [CircleChatPointModel getObjFromDBWithKey:self.sessionID];
    if (!chatPoint) {
        return;
    }
//    chatPoint.sessionId = StrDFString(self.sessionID, msgCenter.sessionID);
//    chatPoint.recipientId = self.userId;
//    chatPoint.nickName = self.nickName;
//    chatPoint.userType = @"3";
    chatPoint.respondDate = [NSString stringWithFormat:@"%.f", [messageModel.timestamp timeIntervalSince1970] * 1000.f];
    chatPoint.displayDate = [QWGLOBALMANAGER updateDisplayTime:messageModel.timestamp];
    chatPoint.readFlag = YES;
    chatPoint.isSend = @(sendState).stringValue;
    switch ( messageModel.messageMediaType ) {
        case MessageMediaTypeText:
        {
            chatPoint.respond = messageModel.text;
            break;
        }
        case MessageMediaTypePhoto:
        {
            chatPoint.respond = @"[图片]";
            break;
        }
        case MessageMediaTypeActivity:
        {
            chatPoint.respond = @"[活动]";
            break;
        }
        case MessageMediaTypeLocation:
        {
            chatPoint.respond = @"[位置]";
            break;
            
        }
        case MessageMediaTypeMedicine:
        {
            chatPoint.respond = @"[药品]";
            break;
        }
        case MessageMediaTypeMedicineSpecialOffers:
        {
            chatPoint.respond = @"[活动]";
            break;
            
        }
        default:
            break;
    }
    [chatPoint updateToDB];
    [GLOBALMANAGER postNotif:NotiMessageExpertPTPNeedUpdate data:nil object:nil];
}

//图片上传进度,UI显示百分比
-(void)progressUpdate:(NSString *)uuid progress:(float)newProgress
{
    dispatch_async(dispatch_get_main_queue(), ^{
        MessageModel *message = [msgCenter getMessageWithUUID:uuid];
        NSIndexPath *indexPath = [NSIndexPath indexPathForRow:[msgCenter getMessageIndex:message] inSection:0];
        ChatOutgoingTableViewCell *cell = (ChatOutgoingTableViewCell *)[self.tableMain cellForRowAtIndexPath:indexPath];
        if (cell) {
            ((PhotoChatBubbleView *)cell.bubbleView).dpMeterView.hidden = NO;
            //           ((PhotoChatBubbleView *)cell.resendButton.hidden = YES;
            [((PhotoChatBubbleView *)cell.bubbleView).dpMeterView setProgress:newProgress];
        }
        
    });
}

#pragma mark -
#pragma mark 发送
- (void)didSendTextAction:(NSString *)text
{
    [self statisticsEvent_SendMsg];
    if([QWGLOBALMANAGER removeSpace:text].length == 0)
    {
        
        [self.messageInputView.inputTextView  resignFirstResponder];
        [SVProgressHUD showErrorWithStatus:kWarning45 duration:DURATION_SHORT];
        return;
    }
    MessageModel *textModel = [[MessageModel alloc] initWithText:text
                                                          sender:self.messageSender
                                                       timestamp:[NSDate date]
                                                            UUID:[XMPPStream generateUUID]];
    
    [self sendMessage:textModel messageBodyType:MessageMediaTypeText];
    [self finishSendMessageWithBubbleMessageType:MessageMediaTypeText];
}

/**
 *  点击发送时，做隐藏键盘操作
 */
- (void)finishSendMessageWithBubbleMessageType:(MessageBodyType)mediaType {
    switch (mediaType) {
        case MessageMediaTypeText:
        {
            [self.messageInputView.inputTextView setText:nil];
            if ([[[UIDevice currentDevice] systemVersion] floatValue] >= 7.0) {
                self.messageInputView.inputTextView.enablesReturnKeyAutomatically = NO;
                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                    self.messageInputView.inputTextView.enablesReturnKeyAutomatically = YES;
                    [self.messageInputView.inputTextView reloadInputViews];
                });
            }
        }
            break;
        case MessageMediaTypePhoto:
        {
            
        }
            break;
        default:
            break;
    }
}

#pragma mark - 停止音乐播放,并检索到播放的Cell,暂停动画
- (void)stopMusicInOtherBubblePressed
{
    if(playingMessageModel) {
        playingMessageModel.audioPlaying = NO;
        NSIndexPath *indexPath = [NSIndexPath indexPathForRow:[msgCenter getMessageIndex:playingMessageModel] inSection:0];
        ChatTableViewCell *cell = (ChatTableViewCell *)[self.tableMain cellForRowAtIndexPath:indexPath];
        [cell stopVoicePlay];
        XHAudioPlayerHelper *playerHelper = [XHAudioPlayerHelper shareInstance];
        [playerHelper stopAudioWithOutDelegate];
        playingMessageModel = nil;
    }
}

#pragma mark - UIResponder actions

- (void)routerEventWithName:(NSString *)eventName userInfo:(NSDictionary *)userInfo
{
    if(![eventName isEqualToString:kRouterEventOfVoice]) {
        [self stopMusicInOtherBubblePressed];
    }
    for (ChatTableViewCell *cell in self.tableMain.visibleCells) {
        [cell updateMenuControllerVisiable];
    }
    
    if([eventName isEqualToString:kRouterEventLocationChat]){
        [self.messageInputView.inputTextView resignFirstResponder];
        MessageModel *model=[userInfo objectForKey:KMESSAGEKEY];
        ShowLocationViewController *showLocationViewController = [[ShowLocationViewController alloc] init];
        showLocationViewController.coordinate =[model location].coordinate;
        showLocationViewController.address = [model text];
        [self.navigationController pushViewController:showLocationViewController animated:YES];
    }
    else if ([eventName isEqualToString:kRouterEventNoImageActivityBubbleTapEventName] || [eventName isEqualToString:kRouterEventHaveImageActivityBubbleTapEventName] )
    {
        //发送营销活动
        
        MarketDetailViewController *marketDetailViewController = nil;
        MessageModel *model=[userInfo objectForKey:KMESSAGEKEY];
        marketDetailViewController = [[MarketDetailViewController alloc] initWithNibName:@"MarketDetailViewController" bundle:nil];
        NSString *richBody = model.richBody;
        NSDate *date = model.timestamp;
        NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
        [formatter setDateFormat:@"yyyy-MM-dd"];
        
        NSMutableDictionary *infoDict = [NSMutableDictionary dictionary];
        infoDict[@"activityId"] = richBody;
        marketDetailViewController.infoDict = infoDict;
        marketDetailViewController.userType = 1;
        marketDetailViewController.imStatus = 2;
        
        if (!richBody)
        {
            marketDetailViewController.infoDict =[NSMutableDictionary dictionaryWithDictionary:@{@"title":StrFromObj(model.title),
                                                                                                 @"content":StrFromObj(model.text),
                                                                                                 @"imgUrl":(model.activityUrl ==nil)? @"":model.activityUrl,
                                                                                                 @"publishTime":StrFromObj([formatter stringFromDate:date])                                                             }];
        }
        
        marketDetailViewController.infoNewDict =[NSMutableDictionary dictionaryWithDictionary: @{@"title":StrFromObj(model.title),
                                                                                                 @"activityId":StrFromObj(model.richBody),
                                                                                                 @"content":StrFromObj(model.text),
                                                                                                 @"publishTime":StrFromObj([formatter stringFromDate:date])                                                             }];
        
        [self.navigationController pushViewController:marketDetailViewController animated:YES];
        
    }else if ([eventName isEqualToString:kRouterEventPhotoBubbleTapEventName])
    {
        //点击预览图片
        BubblePhotoImageView *bubble=[userInfo objectForKey:KMESSAGEKEY];
        MessageModel *mm=bubble.messageModel;
        NSString *uuid=StrFromObj(mm.UUID);
        //        DebugLog(@"点击预览图片1 %@",uuid);
        arrPhotos=[[msgCenter getImages] copy];
        if (arrPhotos.count==0) {
            return;
        }
        //
        int i = 0;
        for (id obj in arrPhotos) {
            if ([obj isKindOfClass:[NSString class]]) {
                NSString *uid=obj;
                if ([uid isEqualToString:uuid]) {
                    break;
                }
            }
            i++;
        }
        
        UIStoryboard *sb = [UIStoryboard storyboardWithName:@"PhotoAlbum" bundle:nil];
        PhotoPreView* vc = [sb instantiateViewControllerWithIdentifier:@"PhotoPreView"];
        
        vc.arrPhotos = arrPhotos;     //uiimage或者url数组，用全局数组，否则会crash
        vc.indexSelected = (i==arrPhotos.count)?0:i;   //[self currentSelectedImageIndex:self.photoArrays currentUUID:message.UUID];   //点击图片在数组里的index
        //        DebugLog(@"点击预览%@->图片 %li : %@",uuid,vc.indexSelected,arrPhotos);
        [self presentViewController:vc animated:YES completion:^{
            
        }];
        
        //        BubblePhotoImageView *imageView=[userInfo objectForKey:@"message"];
        //        [SJAvatarBrowser showImage:(UIImageView *)imageView];
        
    }else if ([eventName isEqualToString:kRouterEventOnceDrugBubbleTapEventName])
    {
        //发送药品链接
        MessageModel *model = onceModel;
        
        [msgCenter deleteMessagesByType:MessageMediaTypeMedicineShowOnce];
        [msgCenter deleteMessagesByType:MessageMediaTypeMedicineSpecialOffersShowOnce];
        model.messageMediaType = MessageMediaMallMedicine;
        [self sendMessage:model messageBodyType:model.messageMediaType];
        
    }else if ([eventName isEqualToString:kRouterEventOnceCouponBubbleTapEventName])
    {
        //发送优惠活动链接
        MessageModel *model = [userInfo objectForKey:KMESSAGEKEY];
        
        [msgCenter deleteMessagesByType:MessageMediaTypeMedicineShowOnce];
        [msgCenter deleteMessagesByType:MessageMediaTypeMedicineSpecialOffersShowOnce];
        
        model.messageMediaType = MessageMediaTypeMedicineSpecialOffers;
        [self sendMessage:model messageBodyType:MessageMediaTypeMedicineSpecialOffers];
    }
    else if ([eventName isEqualToString:kResendButtonTapEventName])
    {
        //重发
        self.dicNeedResend = userInfo;
        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"提示" message:@"重发该消息?" delegate:self cancelButtonTitle:@"取消" otherButtonTitles:@"确定", nil];
        alertView.tag = alertPrivateResendIdentifier;
        [alertView show];
        
        
    }else if ([eventName isEqualToString:kDeleteBtnTapEventName])
    {
        //删除
        self.dicNeedDelete = userInfo;
        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:nil message:@"你确定要删除吗?" delegate:self cancelButtonTitle:@"取消" otherButtonTitles:@"确定", nil];
        alertView.tag = alertPrivateDeleteIdentifier;
        [alertView show];
    }
    else if ([eventName isEqualToString:kRouterEventOfVoice]) {
        MessageModel *model=[userInfo objectForKey:KMESSAGEKEY];
        XHAudioPlayerHelper *playerHelper = [XHAudioPlayerHelper shareInstance];
        [playerHelper setDelegate:self];
        //如果之前已经有语音了,则需要停止播放上一条,才开始播放本次点击
        if(playingMessageModel) {
            playingMessageModel.audioPlaying = NO;
            NSIndexPath *indexPath = [NSIndexPath indexPathForRow:[msgCenter getMessageIndex:playingMessageModel] inSection:0];
            ChatTableViewCell *cell = (ChatTableViewCell *)[self.tableMain cellForRowAtIndexPath:indexPath];
            [cell stopVoicePlay];
            //如果当前点击的和正在播放的属于同一条,则暂停播放 然后返回
            if(model == playingMessageModel) {
                [playerHelper stopAudioWithOutDelegate];
                playingMessageModel = nil;
                return;
            }
        }
        //点击该语音消息,可能出现三种情况,正在下载中,下载失败,下载成功
        if(model.download == MessageFileState_Downloading) {
            //下载中则直接返回,等待下载结果
            return;
        }else if(model.download == MessageFileState_Failure || model.download == MessageFileState_Pending) {
            //下载失败需要重新下载
            NSIndexPath *indexPath = [NSIndexPath indexPathForRow:[msgCenter getMessageIndex:model] inSection:0];
            ChatTableViewCell *cell = (ChatTableViewCell *)[self.tableMain cellForRowAtIndexPath:indexPath];
            [cell redownloadAudio:nil];
        }else{
            //下载成功则直接播放
            XHAudioPlayerHelper *playerHelper = [XHAudioPlayerHelper shareInstance];
            [playerHelper stopAudioWithOutDelegate];
            playingMessageModel = model;
            playingMessageModel.audioPlaying = YES;
            if(!model.voicePath || model.voicePath.length == 0)
            {
                return;
            }
            NSMutableArray *conpoment = [[model.voicePath componentsSeparatedByString:@"/"] mutableCopy];
            conpoment = [conpoment subarrayWithRange:NSMakeRange(conpoment.count - 4, 4)];
            NSString *amrPath = [NSHomeDirectory() stringByAppendingPathComponent:[conpoment componentsJoinedByString:@"/"]];
            NSData *amrData = [[NSData alloc] initWithContentsOfFile:amrPath];
            if(!amrData || amrData.length == 0)
                return;
            //播放前转成caf,即PCM格式
            NSData *cafData = [self.voiceRecordHelper convertAmrToCaf:amrData];
            NSString *cafTempPath = [NSHomeDirectory() stringByAppendingPathComponent:[NSString stringWithFormat: @"tmp/temp.caf"]];
            [cafData writeToFile:cafTempPath atomically:YES];
            [playerHelper managerAudioWithFileName:cafTempPath toPlay:YES];
        }
    }
    else if ([eventName isEqualToString:kCouponMedicineBubbleView]) {
//        MessageModel *mm=[userInfo objectForKey:KMESSAGEKEY];
//        NSString *tokenStr = @"";
//        if (QWGLOBALMANAGER.configure.userToken.length > 0) {
//            tokenStr = QWGLOBALMANAGER.configure.userToken;
//        }
//        WebDirectViewController *vcWebDirect = [[UIStoryboard storyboardWithName:@"WebDirect" bundle:nil] instantiateViewControllerWithIdentifier:@"WebDirectViewController"];
//        MapInfoModel *modelMap = [QWUserDefault getObjectBy:APP_MAPINFOMODEL];
//        WebDrugDetailModel *modelDrug = [WebDrugDetailModel new];
//        modelDrug.modelMap = modelMap;
//        modelDrug.proDrugID = mm.richBody;
//        modelDrug.promotionID = mm.otherID;
//        WebDirectLocalModel *modelLocal = [WebDirectLocalModel new];
//        modelLocal.typeLocalWeb = WebPageToWebTypeMedicine;
//        modelLocal.modelDrug = modelDrug;
//        [vcWebDirect setWVWithLocalModel:modelLocal];
//        vcWebDirect.hidesBottomBarWhenPushed = YES;
//        [self.navigationController pushViewController:vcWebDirect animated:YES];
    }
    else if ([eventName isEqualToString:kRouterEventDrugChat])
    {
        //fixed by lijian at V4.0
        MessageModel *model=[userInfo objectForKey:KMESSAGEKEY];

        if(model.messageDeliveryType == MessageTypeReceiving){
            //收到的数据
            [self BranchHasDrugJudgeMentByDrugId:model.richBody];
        }else{
            //发送的数据
            [self pushToMedicintDetailWithID:model.branchProId];
        }
    }
    else if ([eventName isEqualToString:kRouterEventChatHeadImageTapEventName])
    {
        MessageModel *model=[userInfo objectForKey:KMESSAGEKEY];
        if ([model isKindOfClass:[MessageModel class]] && model.messageDeliveryType == MessageTypeReceiving && model.userType != 0) {
            if (model.userType == PosterType_YaoShi || model.userType == PosterType_YingYangShi) {
                ExpertPageViewController *vc = [[UIStoryboard storyboardWithName:@"ExpertPage" bundle:nil] instantiateViewControllerWithIdentifier:@"ExpertPageViewController"];
                vc.hidesBottomBarWhenPushed = YES;
                vc.posterId = model.senderId;
                vc.expertType = (int)model.userType;
                vc.preVCNameStr = @"私聊";
                vc.nickName = model.nickName;
                vc.fromPrivateChat = YES;
                [self.navigationController pushViewController:vc animated:YES];
            }
            else
            {
                UserPageViewController *vc = [[UIStoryboard storyboardWithName:@"UserPage" bundle:nil] instantiateViewControllerWithIdentifier:@"UserPageViewController"];
                vc.hidesBottomBarWhenPushed = YES;
                vc.mbrId = model.senderId;
                [self.navigationController pushViewController:vc animated:YES];
            }
        }
    }
}


- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex
{
    if (alertView.tag == alertPrivateResendIdentifier) {
        if (buttonIndex == 0) {
            
        } else if (buttonIndex == 1) {
            // 重发
            if (self.dicNeedResend) {
                MessageModel *model=[self.dicNeedResend objectForKey:@"kShouldResendModel"];
                switch (model.messageMediaType) {
                    case MessageMediaTypePhoto:
                    {
                        [msgCenter resendFileMessage:model success:^(id successObj) {
                            NSIndexPath *indexPath = [NSIndexPath indexPathForRow:[msgCenter getMessageIndex:model] inSection:0];
                            ChatOutgoingTableViewCell *cell = (ChatOutgoingTableViewCell *)[self.tableMain cellForRowAtIndexPath:indexPath];
                            ((PhotoChatBubbleView *)cell.bubbleView).dpMeterView.activeShow.hidden = YES;
                            ((PhotoChatBubbleView *)cell.bubbleView).dpMeterView.hidden = YES;
                            ((PhotoChatBubbleView *)cell.bubbleView).dpMeterView.progressLabel.text = [NSString stringWithFormat:@"%d%@",0,@"%"];
                            [self messageToCircleChatPoint:model sendState:MessageDeliveryState_Delivered];
                            [self.tableMain reloadData];
                            
                        } failure:^(id failureObj) {
                            NSIndexPath *indexPath = [NSIndexPath indexPathForRow:[msgCenter getMessageIndex:model] inSection:0];
                            ChatOutgoingTableViewCell *cell = (ChatOutgoingTableViewCell *)[self.tableMain cellForRowAtIndexPath:indexPath];
                            
                            ((PhotoChatBubbleView *)cell.bubbleView).dpMeterView.activeShow.hidden = YES;
                            ((PhotoChatBubbleView *)cell.bubbleView).dpMeterView.hidden = YES;
                            ((PhotoChatBubbleView *)cell.bubbleView).dpMeterView.progressLabel.text = [NSString stringWithFormat:@"%d%@",0,@"%"];
                            [self.tableMain reloadData];
                            [self messageToCircleChatPoint:model sendState:MessageDeliveryState_Failure];
                        } uploadProgressBlock:^(MessageModel *target, float progress) {
                            
                            [self progressUpdate:model.UUID progress:progress];
                            
                        }];
                        
                    }
                        break;
                    case MessageMediaTypeVoice:
                    {
                        [msgCenter resendFileMessage:model success:^(id successObj) {
                            [self messageToCircleChatPoint:model sendState:MessageDeliveryState_Delivered];
                            [self.tableMain reloadData];
                        } failure:^(id failureObj) {
                            [self messageToCircleChatPoint:model sendState:MessageDeliveryState_Failure];
                            [self.tableMain reloadData];
                        } uploadProgressBlock:NULL];
                    }
                        break;
                    default: {
                        [msgCenter resendMessage:model success:^(id successObj) {
                            [self messageToCircleChatPoint:model sendState:MessageDeliveryState_Delivered];
                            [self.tableMain reloadData];
                        } failure:^(id failureObj) {
                            [self messageToCircleChatPoint:model sendState:MessageDeliveryState_Failure];
                            [self.tableMain reloadData];
                        }];
                    }
                        break;
                }
                [self messageToCircleChatPoint:model sendState:MessageDeliveryState_Delivering];
            }
        }
    } else if (alertView.tag == alertPrivateDeleteIdentifier) {
        if (buttonIndex == 1) {
            // 删除
            if (self.dicNeedDelete) {
                
                MessageModel *model=[self.dicNeedDelete objectForKey:@"kShouldDeleteModel"];
//                if(playingMessageModel && (model == playingMessageModel))
//                    [self stopMusicInOtherBubblePressed];
                [msgCenter removeMessage:model success:^(id successObj) {
                    //
                } failure:^(id failureObj) {
                    //
                }];
            }
        }
    }
}

//对proId进行逻辑判断
- (void)BranchHasDrugJudgeMentByDrugId:(NSString *)drugId{
    
    //PRD文档综述:
    //3.用户在点击专家发送的药品链接时，优先判断用户当前首页药房内该药品是否有售
    //1)若有售则进入首页药房内的的该商品微商详情页面
    //2)若首页药房无售，则进入该商品的比价页面
    //3)通过咨询专家页面，点击药品链接进入药品详情页时，药品详情页的“咨询”按键不显示（如图
    if(!StrIsEmpty(drugId)){
        
        //与首页药房关联，查询这个商品是否在售
        BranchProModelR *modelR = [BranchProModelR new];
        modelR.code = drugId;
        modelR.branchId = [QWGLOBALMANAGER getMapBranchId];
        
        [ConsultStore CodeAtBranchIsSale:modelR success:^(BranchProVo *model) {
            if(model.saleFlag && !StrIsEmpty(model.id)){
                //(1)
                [self pushToMedicintDetailWithID:model.id];
            }else{
                //(2)
                MedicineSearchResultViewController *VC = [[MedicineSearchResultViewController alloc]initWithNibName:@"MedicineSearchResultViewController" bundle:nil];
                VC.productCode = drugId;
                [self.navigationController pushViewController:VC animated:YES];
            }
        } failure:^(HttpException *e) {
            [self pushToH5DrugDetailWithID:drugId];
        }];
    }
}

//直接跳转源生商品详情
- (void)pushToMedicintDetailWithID:(NSString *)drugId
{
    if(StrIsEmpty(drugId)){
        return;
    }
    MedicineDetailViewController *VC = [[MedicineDetailViewController alloc]initWithNibName:@"MedicineDetailViewController" bundle:nil];
    VC.proId = drugId;
    //(3)
    VC.pushFromChatView = YES;
    [self.navigationController pushViewController:VC animated:YES];
}

//直接跳转H5药品详情
- (void)pushToH5DrugDetailWithID:(NSString *)drugId
{
    
    WebDirectViewController *vcWebMedicine = [[UIStoryboard storyboardWithName:@"WebDirect" bundle:nil] instantiateViewControllerWithIdentifier:@"WebDirectViewController"];
    
    MapInfoModel *modelMap = [QWUserDefault getObjectBy:APP_MAPINFOMODEL];
    WebDrugDetailModel *modelDrug = [WebDrugDetailModel new];
    modelDrug.modelMap = modelMap;
    modelDrug.proDrugID = drugId;
    WebDirectLocalModel *modelLocal = [WebDirectLocalModel new];
    modelLocal.typeLocalWeb = WebPageToWebTypeMedicine;
    modelLocal.modelDrug = modelDrug;
    [vcWebMedicine setWVWithLocalModel:modelLocal];
    [self.navigationController pushViewController:vcWebMedicine animated:YES];
}

- (void)getNotifType:(Enum_Notification_Type)type data:(id)data target:(id)obj
{
    if (type == NotifQuitOut) {
        if(playingMessageModel) {
            NSIndexPath *indexPath = [NSIndexPath indexPathForRow:[msgCenter getMessageIndex:playingMessageModel] inSection:0];
            ChatTableViewCell *cell = (ChatTableViewCell *)[self.tableMain cellForRowAtIndexPath:indexPath];
            [cell stopVoicePlay];
            [[XHAudioPlayerHelper shareInstance] stopAudio];
            playingMessageModel = nil;
        }
        [[XHAudioPlayerHelper shareInstance] setDelegate:nil];
        [msgCenter deleteMessagesByType:MessageMediaTypeMedicineShowOnce];
        [msgCenter deleteMessagesByType:MessageMediaTypeMedicineSpecialOffersShowOnce];
        [msgCenter stop];

        [self.navigationController popToRootViewControllerAnimated:NO];
    }
    else if (type == NotimessageIMTabelUpdate) {
        if (self.didScrollOrReload) {
            [self.tableMain reloadData];
        }else
        {
            self.didScrollOrLoad = YES;
        }
    }else if (type == NotifAppDidEnterBackground) {
        //进到后台时,需要暂停播放中的音乐
        [self stopMusicInOtherBubblePressed];
        //如果录音中进入后台或者被其他app抢断例如来电话(bug fixed),需要暂停,并且释放资源
        if(self.voiceRecordHelper.recorder.isRecording) {
            WEAKSELF
            [self.voiceRecordHUD stopRecordCompled:^(BOOL fnished) {
                weakSelf.voiceRecordHUD = nil;
            }];
            [self.voiceRecordHelper stopRecordingWithStopRecorderCompletion:^{
                
            }];
        }
    }
    
}

- (void)statisticsEvent_SendMsg
{
    NSMutableDictionary* paramDic = [NSMutableDictionary dictionaryWithDictionary:@{@"专家姓名":self.nickName,@"点击时间":[QWGLOBALMANAGER timeStrNow]}];
    if (self.expertType == PosterType_YaoShi) {
        paramDic[@"专家类型"] = @"药师";
    }
    else
    {
        paramDic[@"专家类型"] = @"营养师";
    }
    [QWGLOBALMANAGER statisticsEventId:@"x_zjym_zxfs" withLable:@"专家页面-咨询-发送" withParams:paramDic];
}

@end
